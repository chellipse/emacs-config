#+TITLE: Emacs configuration
#+AUTHOR: chellipse
#+PROPERTY: header-args:emacs-lisp :lexical t :results silent
#+STARTUP: content

* Core
** Lexical binding
#+begin_src emacs-lisp :comments no
  ;;; -*- lexical-binding: t -*-
#+end_src
** =general=
#+begin_src emacs-lisp
(use-package general :ensure (:wait t) :demand t
  :config
  (general-evil-setup))
#+end_src
** =no-littering=
#+begin_src emacs-lisp
(setq create-lockfiles nil)

(setq custom-file (expand-file-name "custom.el" "~/.local/state/emacs/"))
(when (file-exists-p custom-file)
  (load custom-file))

(use-package no-littering
  :ensure t
  :config
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq backup-directory-alist
        `(("." . ,(no-littering-expand-var-file-name "backup/"))))

  ;; Keep transient files organized
  (setq transient-history-file (no-littering-expand-var-file-name "transient/history.el")
        transient-levels-file (no-littering-expand-etc-file-name "transient/levels.el")
        transient-values-file (no-littering-expand-etc-file-name "transient/values.el")))
#+end_src
** General macros
#+begin_src emacs-lisp
(defmacro load! (file)
  "Load user-emacs-directory/FILE."
  `(load-file (concat (expand-file-name user-emacs-directory) ,file)))

(defmacro after! (files &rest body)
  "Eval BODY after loading all FILES."
  (if (null files)
      `(progn ,@body)
    `(with-eval-after-load ',(car files)
       (after! ,(cdr files) ,@body)))
  )

(defmacro add-hook! (files target)
  "Define hooks for all FILES to TARGET...
FILES should be an unquoted list.
TARGET should be a quoted mode"
  (cl-loop for val in files
           collect `(add-hook ',val ,target) into defs
           finally return `(progn ,@defs)))

(defmacro cmd! (&rest body)
  "Returns (lambda () (interactive) ,@body)
A factory for quickly producing interaction commands, particularly for keybinds
or aliases."
  (declare (doc-string 1))
  `(lambda (&rest _) (interactive) ,@body))
#+end_src
** Bind macros
#+begin_src emacs-lisp
(defvar doom-evil-state-alist
  '((?n . normal)
    (?v . visual)
    (?i . insert)
    (?e . emacs)
    (?o . operator)
    (?m . motion)
    (?r . replace)
    (?g . global))
  "A list of cons cells that map a letter to a evil state symbol.")

(defun doom-keyword-name (keyword)
  "Returns the string name of KEYWORD (`keywordp') minus the leading colon."
  (declare (pure t) (side-effect-free t))
  (cl-check-type keyword keyword)
  (substring (symbol-name keyword) 1))

(defun doom--map-keyword-to-states (keyword)
  "Convert a KEYWORD into a list of evil state symbols.

For example, :nvi will map to (list 'normal 'visual 'insert). See
`doom-evil-state-alist' to customize this."
  (cl-loop for l across (doom-keyword-name keyword)
           if (assq l doom-evil-state-alist) collect (cdr it)
           else do (error "not a valid state: %s" l)))

(defmacro my-general-evil-define-key (states keymaps prefix &rest args)
  "A wrapper for `general-define-key' that is similar to `evil-define-key'.
It has positional arguments for STATES and KEYMAPS (that will not be overridden
by a later :keymaps or :states argument). Besides this, it acts the same as
`general-define-key', and ARGS can contain keyword arguments in addition to
keybindings. This can basically act as a drop-in replacement for
`evil-define-key', and unlike with `general-define-key', KEYMAPS does not need
to be quoted."
  (declare (indent 2))
  `(general-def
     :states ,(if (and (listp states)
                       (eq (car states) 'quote))
                  `,states
		        `',states)
     :keymaps ,(if (and (listp keymaps)
			            (eq (car keymaps) 'quote))
                   `,keymaps
                 `',keymaps)
     :prefix ,(if (and (listp prefix)
                       (eq (car prefix) 'quote))
                  `,prefix
		        `',prefix)
     ,@args))

(defmacro map! (states mode &rest body)
  "A wrapper around my-general-evil-define-key."
  `(my-general-evil-define-key ,(doom--map-keyword-to-states states) ,mode () ,@body))

(defmacro map-leader! (states mode leader &rest body)
  "A wrapper around my-general-evil-define-key."
  `(my-general-evil-define-key ,(doom--map-keyword-to-states states) ,mode ,leader ,@body))

(defmacro map-after! (files states mode &rest body)
  "A wrapper around my-general-evil-define-key."
  `(after! ,files (my-general-evil-define-key ,(doom--map-keyword-to-states states) ,mode () ,@body)))

(defmacro map-leader-after! (files states mode leader &rest body)
  "A wrapper around my-general-evil-define-key."
  `(after! ,files (my-general-evil-define-key ,(doom--map-keyword-to-states states) ,mode ,leader ,@body)))
#+end_src
** Functions
#+begin_src emacs-lisp
(defun reload-config ()
  "Reload the current config's init.el."
  (interactive)
  (load-file (expand-file-name "lib.el" user-emacs-directory))
  (load-file (expand-file-name "init.el" user-emacs-directory)))

(defun refresh-global-font-size ()
  (interactive)
  (let ((height (* font-size 10)))
    (set-face-attribute 'default nil :height height)))

(defun increase-global-font-size ()
  (interactive)
  (setq font-size (+ font-size 1))
  (refresh-global-font-size))

(defun decrease-global-font-size ()
  (interactive)
  (setq font-size (- font-size 1))
  (refresh-global-font-size))

(defun search-wikipedia ()
  (interactive)
  (let ((search (read-string "Search: ")))
    (w3m (concat "https://en.wikipedia.org/wiki/Special:Search?search=" search))))
#+end_src
** Binds
#+begin_src emacs-lisp
(map! :n eww-mode-map
        "H" #'eww-back-url)
#+end_src
* UI
** Font
#+begin_src emacs-lisp
;; (setq default-font-mono "Iosevka Pro"
;;       default-font-propo "Iosevka Nerd Font Propo")
(setq default-font-mono "RobotoMono Nerd Font"
      default-font-propo "Roboto")

(setq default-font-size 14)
(unless (boundp 'font-size)
  (setq font-size default-font-size))

(set-face-attribute 'default nil
                    :height (* font-size 10)
                    :family default-font-mono)
(set-face-attribute 'variable-pitch nil
                    :family default-font-propo)
#+end_src
** Statusline
#+begin_src emacs-lisp
(elpaca doom-modeline
  (doom-modeline-mode 1)
  (setq doom-modeline-time-clock-size 3.0
        doom-modeline-always-show-macro-register t
        doom-modeline-buffer-encoding 'non-default
        doom-modeline-buffer-file-name-style 'relative-from-project
        doom-modeline-height 5)
  ;; (display-time-mode 1)
  (column-number-mode 1))
#+end_src
** Theme
*** Modus Operandi
#+begin_src emacs-lisp
(load-theme 'modus-operandi)
#+end_src
*** Doom One
#+begin_src emacs-lisp :tangle no
(elpaca doom-themes
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)
  (doom-themes-org-config)
  ;; (after!
  ;;  (tree-sitter)
  ;;  ;; Functions.
  ;;  (set-face-attribute 'tree-sitter-hl-face:function nil
  ;;                      :inherit '(link font-lock-function-name-face)
  ;;                      :underline nil)
  ;;  (set-face-attribute 'tree-sitter-hl-face:function.call nil
  ;;                      :inherit '(link font-lock-function-name-face)
  ;;                      :weight 'bold
  ;;                      :underline nil)
  ;;  (set-face-attribute 'tree-sitter-hl-face:function.builtin nil
  ;;                      :inherit 'font-lock-builtin-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:function.special nil
  ;;                      :inherit 'font-lock-preprocessor-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:function.macro nil
  ;;                      :inherit 'font-lock-preprocessor-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:method nil
  ;;                      :inherit 'tree-sitter-hl-face:function)
  ;;  (set-face-attribute 'tree-sitter-hl-face:method.call nil
  ;;                      :weight 'bold
  ;;                      :inherit 'tree-sitter-hl-face:function.call)

  ;;  ;; Types.
  ;;  (set-face-attribute 'tree-sitter-hl-face:type nil
  ;;                      :inherit 'font-lock-type-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:type.parameter nil
  ;;                      :inherit 'font-lock-variable-name-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:type.argument nil
  ;;                      :inherit 'tree-sitter-hl-face:type)
  ;;  (set-face-attribute 'tree-sitter-hl-face:type.builtin nil
  ;;                      :inherit 'font-lock-builtin-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:type.super nil
  ;;                      :inherit 'tree-sitter-hl-face:type)
  ;;  (set-face-attribute 'tree-sitter-hl-face:constructor nil
  ;;                      :inherit 'tree-sitter-hl-face:type)

  ;;  ;; Variables, properties.
  ;;  (set-face-attribute 'tree-sitter-hl-face:variable nil
  ;;                      :inherit 'font-lock-variable-name-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:variable.parameter nil
  ;;                      :inherit 'tree-sitter-hl-face:variable)
  ;;  (set-face-attribute 'tree-sitter-hl-face:variable.builtin nil
  ;;                      :inherit 'font-lock-builtin-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:variable.special nil
  ;;                      :inherit 'font-lock-warning-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:property nil
  ;;                      :inherit 'font-lock-constant-face
  ;;                      :slant 'normal)
  ;;  (set-face-attribute 'tree-sitter-hl-face:property.definition nil
  ;;                      :inherit 'tree-sitter-hl-face:variable.parameter)

  ;;  ;; Strings, comments, text proses.
  ;;  (set-face-attribute 'tree-sitter-hl-face:comment nil
  ;;                      :slant 'italic
  ;;                      :inherit 'font-lock-comment-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:doc nil
  ;;                      :inherit 'font-lock-doc-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:string nil
  ;;                      :inherit 'font-lock-string-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:string.special nil
  ;;                      :inherit 'tree-sitter-hl-face:string
  ;;                      :weight 'bold)
  ;;  (set-face-attribute 'tree-sitter-hl-face:escape nil
  ;;                      :inherit 'font-lock-keyword-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:embedded nil
  ;;                      :inherit 'default)

  ;;  ;; Atomics, constants.
  ;;  (set-face-attribute 'tree-sitter-hl-face:keyword nil
  ;;                      :inherit 'font-lock-keyword-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:operator nil
  ;;                      :inherit 'tree-sitter-hl-face:keyword)
  ;;  (set-face-attribute 'tree-sitter-hl-face:label nil
  ;;                      :inherit 'font-lock-preprocessor-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:constant nil
  ;;                      :inherit 'font-lock-constant-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:constant.builtin nil
  ;;                      :inherit 'font-lock-builtin-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:number nil
  ;;                      :inherit 'tree-sitter-hl-face:constant)

  ;;  ;; ------------------------------------
  ;;  ;; Punctuations (aka. should-be-dimmed).

  ;;  (set-face-attribute 'tree-sitter-hl-face:punctuation nil
  ;;                      :inherit 'default)
  ;;  (set-face-attribute 'tree-sitter-hl-face:punctuation.bracket nil
  ;;                      :inherit 'tree-sitter-hl-face:punctuation)
  ;;  (set-face-attribute 'tree-sitter-hl-face:punctuation.delimiter nil
  ;;                      :inherit 'tree-sitter-hl-face:punctuation)
  ;;  (set-face-attribute 'tree-sitter-hl-face:punctuation.special nil
  ;;                      :inherit 'tree-sitter-hl-face:keyword)

  ;;  ;; Markups.
  ;;  (set-face-attribute 'tree-sitter-hl-face:tag nil
  ;;                      :inherit 'font-lock-builtin-face)
  ;;  (set-face-attribute 'tree-sitter-hl-face:attribute nil
  ;;                      :inherit 'font-lock-preprocessor-face))
  )
#+end_src
*** Spacemacs
#+begin_src emacs-lisp :tangle no
(elpaca spacemacs-theme
  (load-theme 'spacemacs-dark t))
#+end_src
*** Nano
#+begin_src emacs-lisp :tangle no
(elpaca '(nano :type git :host github :repo "rougier/nano-emacs")
  (after! (lsp-mode lsp-ui)
          (setq nano-font-family-monospaced default-font-mono
                nano-font-family-proportional default-font-propo)
          ;; (require 'nano-base-colors)
          ;; (require 'nano-faces)
          ;; (require 'nano-layout)
          ;; (require 'nano-theme)
          ;; (require 'nano-theme-light)
          ;; (require 'nano-defaults)
          ;; (require 'nano-modeline)
          ;; (require 'nano-minibuffer)

          ;; Path to nano emacs modules (mandatory)
          (add-to-list 'load-path (concat (expand-file-name user-emacs-directory) "elpaca/builds/nano"))

          ;; Default layout (optional)
          ;; (require 'nano-layout)

          ;; Theming Command line options (this will cancel warning messages)
          (add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
          (add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
          (add-to-list 'command-switch-alist '("-default"  . (lambda (args))))
          (add-to-list 'command-switch-alist '("-no-splash" . (lambda (args))))
          (add-to-list 'command-switch-alist '("-no-help" . (lambda (args))))
          (add-to-list 'command-switch-alist '("-compact" . (lambda (args))))


          ;; Customize support for 'emacs -q' (Optional)
          ;; You can enable customizations by creating the nano-custom.el file
          ;; with e.g. `touch nano-custom.el` in the folder containing this file.
          ;; (let* ((this-file  (or load-file-name (buffer-file-name)))
          ;;        (this-dir  (file-name-directory this-file))
          ;;        (custom-path  (concat this-dir "nano-custom.el")))
          ;;   (when (and (eq nil user-init-file)
          ;;              (eq nil custom-file)
          ;;              (file-exists-p custom-path))
          ;;     (setq user-init-file this-file)
          ;;     (setq custom-file custom-path)
          ;;     (load custom-file)))

          ;; Theme
          (require 'nano-faces)
          (require 'nano-theme)
          (require 'nano-theme-dark)
          (require 'nano-theme-light)

          (advice-add 'nano-theme--mode-line
                      :override (lambda ()
                                  "Derive mode-line and header-line faces from nano-faces."
                                  (set-face-attribute 'mode-line nil
                                                      ;; :height 0.1
                                                      :foreground (if (display-graphic-p)
                                                                      (face-background 'nano-face-default)
                                                                    (face-foreground 'nano-face-default))
                                                      :background (face-background 'nano-face-default)
                                                      ;; :underline  (if (display-graphic-p)
                                                      ;;                 (face-background 'nano-face-subtle)
                                                      ;;               t)
                                                      :overline nil
                                                      :box nil)
                                  (set-face-attribute 'mode-line-inactive nil
                                                      ;; :height 0.1
                                                      :foreground (if (display-graphic-p)
                                                                      (face-background 'nano-face-default)
                                                                    (face-foreground 'nano-face-default))
                                                      :background (face-background 'nano-face-default)
                                                      ;; :underline (if (display-graphic-p)
                                                      ;;                (face-background 'nano-face-subtle)
                                                      ;;              t)
                                                      :overline nil
                                                      :inherit nil
                                                      :box nil)

                                  (set-face-attribute 'doom-modeline-evil-insert-state nil
                                                      :foreground "#51afef")

                                  ;;(when (display-graphic-p)
                                  (set-face-attribute 'header-line nil
                                                      :weight 'light
                                                      :foreground (face-foreground 'nano-face-default)
                                                      :background (face-background 'nano-face-default)

                                                      :overline nil
                                                      :underline nil
                                                      :box nil
                                                      :box `(:line-width 1
                                                                         :color ,(face-background 'nano-face-default)
                                                                         :style nil)
                                                      :inherit nil)

                                  ;; (when (not (display-graphic-p))
                                  ;;   (set-face-attribute 'header-line nil
                                  ;;                    :weight 'light
                                  ;;                       :foreground (face-foreground 'nano-face-default)
                                  ;;                       :background (face-background 'nano-face-subtle)
                                  ;;                       :inverse-video t
                                  ;;                       :overline nil
                                  ;;                       :underline nil
                                  ;;                       :box nil
                                  ;;                            :inherit nil))

                                  ;; (set-face-attribute 'internal-border nil
                                  ;;                     :background (face-foreground 'nano-face-default))

                                  (set-face-attribute 'internal-border nil
                                                      :background (face-background 'nano-face-default)))
                      )

          (advice-add 'nano-theme-set-light :after
                      (lambda ()
                        (setq nano-color-popout "#98be65"
                              nano-color-critical "#B71C1C")))

          (advice-add 'nano-faces :after
                      (lambda ()
                        (set-face-attribute 'nano-face-critical nil
                                            :foreground nano-color-critical
                                            :background nano-color-background)))

          (advice-add 'nano-theme--term :override
                      (lambda ()
                        "Derive term faces from nano faces, and material theme colors."
                        (with-eval-after-load 'term
                          (set-face 'term-bold                                   'nano-face-strong)
                          (set-face-attribute 'term-color-black nil
                                              :foreground (face-foreground 'nano-face-default)
                                              :background (face-foreground 'nano-face-default))
                          (set-face-attribute 'term-color-white nil
                                              :foreground (face-background 'nano-face-default)
                                              :background (face-background 'nano-face-default))
                          (set-face-attribute 'term-color-red nil
                                              :foreground "#C62828"   ;; material color red 800
                                              :background "#FFCDD2")  ;; material color red L100
                          (set-face-attribute 'term-color-green nil
                                              :foreground "#558B2F"   ;; material color green 800
                                              :background "#C8E6C9")  ;; material color green L100
                          (set-face-attribute 'term-color-yellow nil
                                              :foreground "#6D4C41"    ;; material color yellow 800
                                              :background "#FFF9C4");; material color yellow L100
                          (set-face-attribute 'term-color-blue nil
                                              :foreground "#0277BD"   ;; material color blue 800
                                              :background "#BBDEFB")  ;; material color blue L100
                          (set-face-attribute 'term-color-magenta nil
                                              :foreground "#4527A0"   ;; material color purple 800
                                              :background "#E1BEE7")  ;; material color purple L100
                          (set-face-attribute 'term-color-cyan nil
                                              :foreground "#00838F"   ;; material color cyan 800
                                              :background "#B2EBF2"))))  ;; material color cyan L100

          (custom-set-faces
           '(link ((t (:foreground "deep sky blue"))))
           '(tree-sitter-hl-face:comment ((t (:inherit font-lock-comment-face :slant italic))))
           '(tree-sitter-hl-face:constructor ((t (:inherit nil))))
           '(tree-sitter-hl-face:function.call ((t (:inherit (link font-lock-function-name-face) :underline nil :weight bold))))
           '(tree-sitter-hl-face:function.macro ((t (:inherit font-lock-preprocessor-face :weight bold))))
           '(tree-sitter-hl-face:type ((t (:foreground "#FFAB91")))))

          (advice-add 'refresh-global-font-size :after
                      (lambda (&rest r)
                        (setq nano-font-size font-size)
                        (nano-refresh-theme)))

          (advice-add 'lsp-ui-doc--make-frame :after
                      (lambda (&rest r)
                        (nano-refresh-theme)))


          (cond
           ((member "-default" command-line-args) t)
           ((member "-dark" command-line-args) (nano-theme-set-dark))
           (t (nano-theme-set-light)))
          (call-interactively 'nano-refresh-theme)

          ;; Nano default settings (optional)
          ;; (require 'nano-defaults)

          ;; Nano session saving (optional)
          ;; (require 'nano-session)

          ;; Nano header & mode lines (optional)
          ;; (require 'nano-modeline)

          ;; Nano key bindings modification (optional)
          ;; (require 'nano-bindings)

          ;; Compact layout (need to be loaded after nano-modeline)
          ;; (when (member "-compact" command-line-args)
          ;; (require 'nano-compact))

          ;; Nano counsel configuration (optional)
          ;; Needs "counsel" package to be installed (M-x: package-install)
          ;; (require 'nano-counsel)

          ;; Welcome message (optional)
          ;; (let ((inhibit-message t))
          ;;   (message "Welcome to GNU Emacs / N Λ N O edition")
          ;;   (message (format "Initialization time: %s" (emacs-init-time))))

          ;; Splash (optional)
          ;; (unless (member "-no-splash" command-line-args)
          ;;   (require 'nano-splash))

          ;; Help (optional)
          (unless (member "-no-help" command-line-args)
            (require 'nano-help))
          ))
#+end_src
** Scroll
#+begin_src emacs-lisp
(pixel-scroll-precision-mode)
(setq scroll-conservatively 1000
      scroll-preserve-screen-position 'always)
(scroll-bar-mode -1)
#+end_src
** Odds and Ends
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil tab-width 4)

(setq large-file-warning-threshold (* 1000 1000 50))

(global-hl-line-mode 1)
(global-visual-line-mode 1)
(blink-cursor-mode -1)

(setq frame-resize-pixelwise t
      window-resize-pixelwise t)
#+end_src
** Frame Alpha
#+begin_src emacs-lisp
(setq default-frame-alpha 100)
(add-to-list 'default-frame-alist `(alpha-background . ,default-frame-alpha))
#+end_src
** GUI Elements
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(setq inhibit-startup-message t)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode 1)
#+end_src
** Whitespace
#+begin_src emacs-lisp
(setq whitespace-style '(face trailing)
      whitespace-global-modes '(not shell-mode
                                    help-mode
                                    vterm-mode
                                    magit-mode
                                    magit-diff-mode
                                    ibuffer-mode
                                    dired-mode
                                    occur-mode))
(global-whitespace-mode 1)
#+end_src
** =hl-todo=
#+begin_src emacs-lisp
(use-package hl-todo
  :ensure t
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(("TODO" success bold)
          ("FIXME" error bold)
          ("REVIEW" font-lock-keyword-face bold)
          ("HACK" font-lock-constant-face bold)
          ("DEPRECATED" font-lock-doc-face bold)
          ("NOTE" success bold)
          ("BUG" error bold)))
  (global-hl-todo-mode 1))
#+end_src
** =rainbow-delimiters=
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** =dashboard=
#+begin_src emacs-lisp
;; TODO add a hook to reopen the buffer if it doesn't exit when another is deleted
(use-package dashboard
  :ensure t
  :config
  ;; (defvar title-list nil)
  ;; (setq dashboard-banner-logo-title
  ;;       (nth (random (length title-list)) title-list))
  (setq dashboard-startup-banner
        (let* ((img-file (expand-file-name "~/Sync/emacs.jpg"))
               (txt-file (expand-file-name "banners/looking.txt" user-emacs-directory))
               (img-exists (file-exists-p img-file))
               (txt-exists (file-exists-p txt-file)))
          (cond
           ((and img-exists txt-exists) (cons img-file txt-file))
           (img-exists (cons img-file 3))
           (txt-exists (cons 'logo txt-file))
           (t (cons 'logo 3)))))

  (setq dashboard-items '((recents   . 10)
                          ;; (bookmarks . 5)
                          (projects  . 5)
                          ;; (registers . 5)
                          (agenda    . 5)))
  ;; NOTE: goal here is that if we open emacs via cli and pass it file args, that we won't
  ;; end up with the dashboard in one window
  (if (>= 1 (length command-line-args)) (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name))))
  (dashboard-setup-startup-hook))
#+end_src
** =writeroom-mode=
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t
  :config
  (setq writeroom-width 120))
#+end_src
** =diff-hl=
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :config
  (global-diff-hl-mode))
#+end_src
** =rainbow-mode=
#+begin_src emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+end_src
** =which-key=
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode)
  :custom
  (which-key-idle-delay 0.2)
  (which-key-prefix-prefix "+")
  (which-key-sort-order 'which-key-key-order-alpha)
  (which-key-sort-uppercase-first nil)
  (which-key-add-column-padding 1)
  (which-key-max-display-columns nil)
  (which-key-min-display-lines 6)
  :config
  (add-hook 'which-key-init-buffer-hook
            (lambda ()
              (setq-local mode-line-format nil)))
  (setq which-key-show-mode-line nil
        which-key-allow-imprecise-window-fit nil)
  ;; Allow C-h to trigger which-key before it is done automatically
  (setq which-key-show-early-on-C-h t)
  ;; Make sure which-key buffer is always below minibuffer
  (setq which-key-popup-type 'side-window))
#+end_src
* Evil
** =evil=
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :after undo-tree
  :init
  (setq evil-undo-system 'undo-tree
        evil-want-integration t
        evil-want-keybinding nil
        evil-flash-delay 10 ;; Search flash after n/N. Default: 2 (seconds)
        evil-want-C-u-scroll t
        evil-want-C-i-jump t)
  :config
  (evil-mode 1)
  (map-leader! :n '(global evil-mode-map) "SPC"
                  ";" #'eval-expression
                  ":" #'eval-last-sexp
                  "a" #'lsp-execute-code-action
                  "k" #'lsp-ui-doc-glance
                  "r" #'lsp-rename
                  ;; Buffers
                  "b b" #'consult-buffer
                  "b d" '("Kill current buffer." . kill-current-buffer)
                  ;; Emacs
                  "e k" '("Kill Emacs" . save-buffers-kill-emacs)
                  "e r" '("Reload config!" . reload-config)
                  ;; Find
                  "f f" '("Open a file!" . find-file)
                  "f r" '("Open a recent file!" . consult-recent-file)
                  ;; Open
                  "o e" '("Open Eshell!" . eshell)
                  "o g" #'gptel
                  "o r" '("Open Ranger!" . ranger)
                  "o m" '("Open a MAGIT!" . magit)
                  "o t" '("Open Treemacs!" . treemacs)
                  "o v" '("Open vTerm!" . vterm)
                  ;; Search
                  "s w" '("Search: Wikipedia" . search-wikipedia)
                  ;; Window
                  "w h" #'evil-window-left
                  "w j" #'evil-window-down
                  "w k" #'evil-window-up
                  "w l" #'evil-window-right
                  "w s" #'evil-window-split
                  "w v" #'evil-window-vsplit
                  ;; Zen
                  "z i" #'writeroom-increase-width
                  "z d" #'writeroom-decrease-width
                  "z z" #'writeroom-mode)
  (map-leader! :n '(global evil-mode-map) "f"
                      "f" 'consult-buffer
                      "l" 'consult-line
                      "d" 'consult-fd
                      "r" 'consult-ripgrep
                      "m" 'consult-imenu
                      "o" 'consult-org-heading
                      "d" (cmd! (funcall dynamic-diagnostic-fn)))
  (map! :nv '(global evil-mode-map)
              "g e" #'evil-goto-line
              "t" #'comment-line)
  (map! :n '(global evil-mode-map)
              "9" (cmd! (scroll-up 18))
              "0" (cmd! (scroll-down 18))
              "M-+" (cmd! (set-frame-parameter nil 'alpha-background default-frame-alpha))
              "M-=" (cmd! (set-frame-parameter nil 'alpha-background (+ (frame-parameter nil 'alpha-background) 1)))
              "M--" (cmd! (set-frame-parameter nil 'alpha-background (- (frame-parameter nil 'alpha-background) 1)))
              "C-+" (cmd! (setq font-size default-font-size) (refresh-global-font-size))
              "C-=" #'increase-global-font-size
              "C--" #'decrease-global-font-size
              "M-j" #'evil-window-left
              "M-k" #'evil-window-down
              "M-l" #'evil-window-up
              "M-;" #'evil-window-right
              "U" #'evil-redo)
  )
#+end_src
** =evil-collection=
#+begin_src emacs-lisp
(use-package evil-collection
  :ensure t
  :after evil
  :config
  (setq evil-collection-want-unimpaired-p nil)
  (evil-collection-init))
#+end_src
** =evil-goggles=
#+begin_src emacs-lisp
(use-package evil-goggles
  :ensure t
  :after evil
  :init
  (add-hook 'evil-mode-hook #'evil-goggles-mode)
  :config
  (evil-goggles-mode))
#+end_src
** =evil-snipe=
#+begin_src emacs-lisp
(use-package evil-snipe
  :ensure t
  :after evil
  :config
  (evil-snipe-mode +1)
  (evil-snipe-override-mode +1)
  :custom
  (evil-snipe-scope 'whole-visible) ; Search in whole buffer instead of just line
  (evil-snipe-repeat-scope 'whole-visible) ; Same for repeat
  (evil-snipe-smart-case t))        ; Smart case sensitivity
#+end_src
** =undo-tree=
#+begin_src emacs-lisp
(use-package undo-tree
  :ensure t
  :after no-littering
  :init
  (global-undo-tree-mode 1)
  :config
  (setq undo-tree-auto-save-history t
        undo-tree-history-directory-alist
        `(("." . ,(no-littering-expand-var-file-name "undo-tree-hist/")))))
#+end_src
* Completion
** =vertico=
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :custom
  ;; (vertico-scroll-margin 0) ;; Different scroll margin
  (vertico-count 15) ;; Show more candidates
  ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode)
  :config
  (after! (general)
          (general-setq enable-recursive-minibuffers t)
          (minibuffer-depth-indicate-mode)
          (general-setq minibuffer-prompt-properties
                        '(read-only t face minibuffer-prompt intangible t cursor-intangible t))
          (general-add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)))
#+end_src
** =vertico-directory=
#+begin_src emacs-lisp
(use-package vertico-directory
  :ensure nil
  :after vertico general
  :init
  (add-hook 'rfn-esm-update-handlers #'vertico-directory-tidy)
  :config
  (general-def
    :keymaps 'vertico-map
    "RET" 'vertico-directory-enter
    ;; this means backspace goes down a whole dir, i'm not really use why <backspace> gets
    ;; mapped to DEL in that the minibuffer, but it does
    "DEL" 'vertico-directory-delete-char
    "M-DEL" 'vertico-directory-delete-word))
#+end_src
** =consult=
#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :after vertico
  :init
  (advice-add #'register-preview :override #'consult-register-window)
  (setq register-preview-delay 0.5)

  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  (defvar dynamic-diagnostic-fn #'consult-flymake
    "Consult diagnostics dyn fn, changes between consult-flymake and consult-flycheck based on mode")
  (add-hook 'flymake-mode-hook (cmd! (setq dynamic-diagnostic-fn #'consult-flymake)))
  (add-hook 'flycheck-mode-hook (cmd! (setq dynamic-diagnostic-fn #'consult-flycheck)))

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.1 any)
   consult-ripgrep consult-git-grep consult-grep consult-man
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.3 any))

  (setq consult-narrow-key "<")

  (after! (evil)
          (setq evil-jumps-cross-buffers nil)
          (evil-set-command-property 'consult-line :jump t)))
#+end_src
** =consult-flycheck=
#+begin_src emacs-lisp
(use-package consult-flycheck
  :ensure t
  :after consult flycheck)
#+end_src
** =marginalia=
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :after vertico
  :init
  (marginalia-mode)
  :custom
  (marginalia-align 'right)
  (marginalia-max-relative-age 0)
  :config
  ;; Add custom annotators for more informative completions
  (add-to-list 'marginalia-prompt-categories '("\\<face\\>" . face))
  (add-to-list 'marginalia-prompt-categories '("\\<var\\>" . variable)))
#+end_src
** =corfu=
#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
  (corfu-preselect 'prompt) ;; Always preselect the prompt

  ;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))

  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode 1)

  :config
  (setq corfu-auto      t
        corfu-auto-delay  0.2
        corfu-auto-prefix 2
        corfu-popupinfo-delay 0.5)

  ;; (add-hook 'corfu-mode-hook
  ;;           (lambda ()
  ;;             ;; Settings only for Corfu
  ;;             (setq-local completion-styles '(basic)
  ;;                         completion-category-overrides nil
  ;;                         completion-category-defaults nil)))
  )

;; TODO remove this
(use-package emacs
  :custom
  (tab-always-indent 'complete)
  (text-mode-ispell-word-completion nil)
  (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** =orderless=
#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles . (partial-completion basic)))
                                   (project-file (styles . (partial-completion basic)))))
  :config
  ;; Recognize more completion styles
  (setq orderless-matching-styles
        '(orderless-literal
          orderless-prefixes
          orderless-initialism
          orderless-regexp)))
#+end_src
** =cape=
#+begin_src emacs-lisp
(use-package cape
  :ensure t
  :config
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  :hook (org-mode . (lambda ()
                      (add-to-list 'completion-at-point-functions
                                   #'cape-file))))
#+end_src
* Programming
** =electric-pair=
#+begin_src emacs-lisp
(electric-pair-mode 1)

(setq electric-pair-pairs '())
(defun my-electric-pair-specific-mode-config ()
  (cond
   ((member major-mode '(rust-mode))
    (setq-local electric-pair-pairs '((?\" . ?\")
                                      (?\' . ?\')
                                      (?\{ . ?\})
                                      (?\( . ?\))
                                      (?\[ . ?\]))))))

(add-hook 'after-change-major-mode-hook 'my-electric-pair-specific-mode-config)
#+end_src
** =apheleia=
#+begin_src emacs-lisp
;; TODO: make formatting work for babel elisp blocks?
(use-package apheleia
  :ensure t
  :config
  (add-hook! (nix-ts-mode-hook
              nix-mode-hook
              rust-mode-hook
              emacs-lisp-mode-hook) #'apheleia-mode))
#+end_src
** =flycheck=
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (add-hook #'rust-mode-hook #'flycheck-mode))
#+end_src
** =tree-sitter=
#+begin_src emacs-lisp
(use-package tree-sitter-langs
  :ensure t)

(use-package tree-sitter
  :after tree-sitter-langs
  :ensure t
  :init
  (tree-sitter-require 'nix)
  (tree-sitter-require 'rust)
  :config
  ;; (tree-sitter-hl-mode)
  ;; (add-hook 'rust-mode-hook #'tree-sitter-hl-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (global-tree-sitter-mode))
#+end_src
** =yasnippet=
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))
#+end_src
* Langs
** =rust-mode=
#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :after (general lib)
  :config
  (defun rust-current-crate-name ()
    "Get the name of the current crate by parsing Cargo.toml in the crate directory."
    (let ((crate-dir (rust-buffer-crate)))
      (when crate-dir
        (let ((cargo-toml (expand-file-name "Cargo.toml" crate-dir)))
          (when (file-exists-p cargo-toml)
            (with-temp-buffer
              (insert-file-contents cargo-toml)
              (goto-char (point-min))
              (when (re-search-forward "^name\\s-*=\\s-*\"\\([^\"]+\\)\"" nil t)
                (match-string 1))))))))

  (defmacro cargo-cmd! (cmd &key scope)
    "Generate a lambda that calls rust--compile with CMD as the cargo subcommand.
SCOPE can be:
  'workspace - adds --workspace flag
  'package   - adds --package with current crate name
  anything else or nil - uses raw command with no package/workspace flags"
    `(lambda ()
       (interactive)
       (cond
        ((eq ,scope 'workspace)
         (rust--compile nil
                        ,(concat "%s " cmd " --workspace %s")
                        rust-cargo-bin
                        rust-cargo-default-arguments))
        ((eq ,scope 'package)
         (let ((crate-name (rust-current-crate-name)))
           (if crate-name
               (rust--compile nil
                              ,(concat "%s " cmd " --package %s %s")
                              rust-cargo-bin
                              crate-name
                              rust-cargo-default-arguments)
             (rust--compile nil
                            ,(concat "%s " cmd " %s")
                            rust-cargo-bin
                            rust-cargo-default-arguments))))
        (t
         (rust--compile nil
                        ,(concat "%s " cmd " %s")
                        rust-cargo-bin
                        rust-cargo-default-arguments)))))

  (map-leader! :n rust-mode-map "SPC"
               "c x" #'lsp-rust-analyzer-run
               "c r" (cargo-cmd! "run" :scope 'package)
               "c R" (cargo-cmd! "run --release" :scope 'package)
               "c b" (cargo-cmd! "build" :scope 'workspace)
               "c B" (cargo-cmd! "build --release" :scope 'workspace)
               "c t" (cargo-cmd! "test" :scope 'package)
               "c T" (cargo-cmd! "test" :scope 'workspace)
               "c c" (cargo-cmd! "check" :scope 'package)
               "c C" (cargo-cmd! "check" :scope 'workspace))

  (after! (eglot)
          (add-hook 'rust-mode-hook 'eglot-ensure)
          (add-to-list 'eglot-server-programs
                       '(rust-mode . ("rust-analyzer"))))
  (after! (apheleia)
          (setf (alist-get 'rust-mode apheleia-mode-alist) 'rustfmt)
          (setf (alist-get 'rustfmt apheleia-formatters) '("rustfmt" "--edition" "2021")))
  (after! (tree-sitter-langs)
          (setq rust-mode-treesitter-derive t))
  (setq rust-cargo-default-arguments "--color=never"))
#+end_src
** =nix-ts-mode=
#+begin_src emacs-lisp
(use-package nix-ts-mode
  :ensure t
  :mode "\\.nix\\'"
  :custom
  (nix-nixfmt-bin "nixfmt")
  :config
  (after! (apheleia)
          (setf (alist-get 'nix-ts-mode apheleia-mode-alist) 'nixfmt)
          (setf (alist-get 'nixfmt apheleia-formatters)
                '("nixfmt" "-"))))
#+end_src
** =fish-mode=
#+begin_src emacs-lisp
(use-package fish-mode
  :ensure t
  :after (lsp-mode)
  :mode "\\.fish\\'"
  :config
  (lsp-register-client
    (make-lsp-client
    :new-connection (lsp-stdio-connection '("fish-lsp" "start"))
    :major-modes '(fish-mode)
    :server-id 'fish-language-server)))
#+end_src
* LSP
** =lsp-mode=
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :custom
  (lsp-rust-analyzer-cargo-load-out-dirs-from-check t)
  (lsp-rust-analyzer-proc-macro-enable t)
  :config
  (lsp-register-client
    (make-lsp-client
    :new-connection (lsp-stdio-connection '("fish-lsp" "start"))
    :major-modes '(fish-mode)
    :server-id 'my-language-server))
  (setq lsp-completion-provider :none
        lsp-lens-enable nil
        lsp-auto-configure t)
  ;; NOTE: lsp-deferred is required for catching the right envrc env
  (add-hook! (python-mode-hook
              nix-mode-hook
              nix-ts-mode-hook
              rust-mode-hook
              c++-mode-hook
              c-mode-hook) #'lsp-deferred))
#+end_src
** =lsp-ui=
#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure t
  :custom
  (lsp-ui-doc-side 'right)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-enable)
  :config
  (set-face-attribute 'lsp-ui-doc-background nil
                      :background nil)
  (add-hook 'server-after-make-frame-hook (lambda () (set-face-attribute 'lsp-ui-doc-background nil
                                                                         :background nil)))
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-max-width 150
        lsp-ui-doc-max-height 40)
  (map! :n lsp-ui-mode-map
              "g y" #'lsp-goto-type-definition
              "g i" #'lsp-goto-implementation
              "g d" #'evil-goto-definition
              "," #'lsp-ui-doc-toggle
              "." #'lsp-ui-doc-glance))
#+end_src
* Projects
** =projectile=
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :custom
  (projectile-enable-caching t)
  (projectile-globally-ignored-directories
   '(".git" ".log" "build" "node_modules" ".direnv" "target"))
  :config
  (add-to-list 'projectile-project-root-files "shell.nix")
  (add-to-list 'projectile-project-root-files "flake.nix"))
#+end_src
** =rg=
#+begin_src emacs-lisp
(use-package rg
  :ensure t)
#+end_src
** =direnv=
#+begin_src emacs-lisp
(use-package direnv
  :ensure t
  :config
  (direnv-mode))
#+end_src
** =envrc=
#+begin_src emacs-lisp
(use-package envrc
  :ensure t
  :after (lsp-mode flycheck)
  :config
  (envrc-global-mode))
#+end_src
* Tools
** =magit=
#+begin_src emacs-lisp
(use-package transient :ensure t) ;; Dep of Magit
(use-package magit
  :after transient
  :ensure t)
#+end_src
** =vterm=
#+begin_src emacs-lisp
(use-package vterm
  :ensure nil ;; expected via nix
  :commands vterm
  :custom
  (vterm-max-scrollback 10000)
  (vterm-buffer-name-string "vterm: %s")
  :config
  (evil-set-initial-state 'vterm-mode 'insert)
  (map-after! (evil-collection) :n vterm-mode-map
              "C-d" 'vterm--self-insert
              ;; NOTE: evil-collection binds C-c C-z to evil-collection-vterm-toggle-send-escape
              ;; normally, so this is a workaround for now
              "C-c C-c" 'vterm--self-insert
              "I" (cmd! (vterm-reset-cursor-point) (evil-insert 0))))
#+end_src
** =ranger=
#+begin_src emacs-lisp
(use-package ranger
  :ensure t
  :config
  (setq ranger-show-hidden t
        ranger-preview-delay 0.1
        ranger-width-parents 0.16
        ranger-width-preview 0.5
        ranger-max-preview-size 10)
  (map! :n ranger-mode-map
          "DEL" #'ranger-toggle-dotfiles))
#+end_src
** =all-the-icons=
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+end_src
** =treemacs=
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  ;; NOTE: the naive version with a normal hook gets broken on config reload
  :hook (buffer-list-update-hook . (lambda ()
          (when (eq major-mode 'treemacs-mode)
            (setq truncate-lines t))))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-files-by-mouse-dragging    t
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           30
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 16)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+end_src
** =treemacs-evil=
#+begin_src emacs-lisp
(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)
#+end_src
** =treemacs-projectile=
#+begin_src emacs-lisp
(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)
#+end_src
** =treemacs-icons-dired=
#+begin_src emacs-lisp
(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
#+end_src
** =treemacs-magit=
#+begin_src emacs-lisp
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+end_src
** =w3m=
#+begin_src emacs-lisp
(use-package w3m
  :ensure t
  :config
  (add-hook 'w3m-mode-hook (lambda () (setq-local display-line-numbers nil))))
#+end_src
** =gptel=
#+begin_src emacs-lisp
(use-package gptel
  :ensure t
  :config
  (setq gptel-default-mode 'org-mode
        gptel-track-media t
        gptel-org-branching-context t
        gptel-expert-commands t
        gptel-directives '((default
                            . "You are a large language model living in Emacs and a helpful assistant. Repond using these key communication principles.

Key Communication Principles:
- Strictly avoid using analogies; instead, employ precise technical language
- Avoid sycophantic language or appeals to the reader, prioritize logic
- Structure information like a scientific paper, ie with rigorous logical structure
- Correctness comes before pleasantry
- Maintain scholarly objectivity
- Communicate through direct, unambiguous technical language that eliminates interpretative ambiguity.")
                           (programming
                            . "You are a large language model and a careful programmer. Provide code and only code as output without any additional text, prompt or note.")
                           (writing
                            . "You are a large language model and a writing assistant. Respond concisely.")
                           (chat
                            . "You are a large language model and a conversation partner. Respond concisely."))
        gptel-model 'mistral-nemo:latest
        gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :stream t
                        :models
                        '(qwen3:0.6b
                          qwen3:1.7b
                          qwen3:4b
                          qwen3:8b
                          qwen3:14b
                          qwen2.5:14b
                          mistral-nemo:latest
                          mistral-small:22b
                          mistral-small:22b-instruct-2409-q3_K_S
                          mistral-small:22b-instruct-2409-q3_K_L
                          mistral-small:22b-instruct-2409-q3_K_M
                          (mistral-small3.1:latest . (
                                                      :capabilities (media)
                                                      :mime-types ("image/jpeg" "image/png" "image/gif" "image/webp" "application/pdf")))
                          (gemma3:4b . (
                                        :capabilities (media)
                                        :mime-types ("image/jpeg" "image/png" "image/gif" "image/webp" "application/pdf")))
                          (gemma3:12b . (
                                         :capabilities (media)
                                         :mime-types ("image/jpeg" "image/png" "image/gif" "image/webp" "application/pdf")))
                          deepseek-r1:1.5b
                          deepseek-r1:14b
                          phi4-mini:latest
                          phi4:latest
                          deepseek-r1:8b
                          mistral:instruct
                          mistral:text
                          mistral:latest
                          llama3.2:latest))))
#+end_src
** =elfeed=
#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :config
  (map! :n elfeed-show-mode-map
        "<up>" 'elfeed-show-prev
        "<down>" 'elfeed-show-next)
  (setq elfeed-search-filter "@2-week-ago"
        ;; elfeed-show-entry-switch #'pop-to-buffer
        elfeed-feeds '(
                       ("https://loginasroot.net/rss.xml" friend)
                       ("https://alicemaz.substack.com/feed" friend software)
                       ("https://faroffunhappythings.com/?feed=rss2" FOUT)
                       ("https://www.kenklippenstein.com/feed" journalism)
                       ("https://xkcd.com/atom.xml" comic)
                       ("https://fasterthanli.me/index.xml" rust)
                       ("https://lwn.net/headlines/rss" linux oss)
                       ("https://cafkafk.dev/index.xml" software)
                       ("https://www.lineageos.org/feed-engineering.xml" android)
                       ("https://research.google/blog/rss/" google)
                       ("https://deepmind.google/blog/rss.xml" google ml)
                       ("https://terrytao.wordpress.com/feed/" math)
                       ("https://karthinks.com/software/index.xml" emacs)
                       ("https://parakeet.substack.com/feed" tpot)
                       ;; ("")

                       ("https://thahxa.tumblr.com/rss" friend tumblr)
                       ("https://centrally-unplanned.tumblr.com/rss" tumblr)
                       ("https://vren-diagram.tumblr.com/rss" tumblr)
                       ("https://phaeton-flier.tumblr.com/rss" tumblr)
                       ("https://transgenderer.tumblr.com/rss" tumblr)
                       ("https://wildgifthorses.tumblr.com/rss" tumblr)
                       ("https://autogeneity.tumblr.com/rss" tumblr)

                       ("https://www.helius.dev/blog/rss.xml" solana)
                       ("https://apfitzge.github.io/index.xml#feed" solana)

                       ("https://danluu.com/atom.xml" programming industry)
                       ("https://www.kalzumeus.com/feed/articles/" finance industry)
                       ("https://www.thediff.co/archive/rss/" finance)
                       ("https://rss.beehiiv.com/feeds/JyXsSUwlAE.xml" finance)
                       ("https://www.bloomberg.com/authors/ARbTQlRLRjE/matthew-s-levine.rss" finance)
                       ("https://www.bitsaboutmoney.com/archive/rss/" finance industry)
                       ("https://feeds.transistor.fm/complex-systems-with-patrick-mckenzie-patio11" finance industry)
                       ;; ("")
                       )))
#+end_src
* Org
** =org=
#+begin_src emacs-lisp
(setq org-preview-latex-image-directory "/tmp/ltximg/"
      org-preview-latex-default-process 'luadvisvgm)
(add-to-list 'org-preview-latex-process-alist
             '(luadvisvgm :programs
                          ("lualatex" "dvisvgm")
                          :description "dvi > svg" :message "you need to install the programs: lualatex and dvisvgm." :image-input-type "dvi" :image-output-type "svg" :image-size-adjust
                          (1.7 . 1.5)
                          :latex-compiler
                          ("lualatex --output-format dvi --shell-escape --interaction=nonstopmode --output-directory=%o %f")
                          :image-converter
                          ("dvisvgm %f -n -b min -c %S -o %O"))
             )


(defun my-org-latex-preview-at-point ()
  "Preview LaTeX fragment at point when using C-c C-c."
  (when (org-inside-LaTeX-fragment-p)
    (org-latex-preview)
    t))  ; Return t to prevent other C-c C-c actions
(add-hook 'org-ctrl-c-ctrl-c-hook #'my-org-latex-preview-at-point)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((gnuplot . t)))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)

(setq org-confirm-babel-evaluate
      (lambda (lang body)
        (not (member lang '("gnuplot" "rust")))))

(defun my-gnuplot-unique-filename ()
  "Generate unique filename for gnuplot output."
  (concat "/tmp/plot-" (format-time-string "%s-%N") ".png"))

(setq org-format-latex-options
      (plist-put org-format-latex-options :scale 1.25))

(add-hook 'org-mode-hook (lambda () (setq-local fill-column 100)))
(add-hook 'org-mode-hook #'org-indent-mode)
(unless (file-exists-p "~/Sync/org")
  (make-directory "~/Sync/org" t))
(setq org-blank-before-new-entry
      '((heading . nil)    ;; No blank line before new headings
        (plain-list-item . nil)))  ;; No blank line before new items
(setq org-directory "~/Sync/org"
      org-agenda-files '("~/Sync/org/agenda.org"))
#+end_src
** =evil-org=
#+begin_src emacs-lisp
(use-package evil-org
  :ensure t
  :after evil org
  :custom
  (evil-org-key-theme '(additional
                        calendar
                        heading
                        insert
                        navigation
                        return
                        shift
                        textobjects
                        todo))

  :config
  (add-hook 'org-mode-hook #'evil-org-mode)
  (evil-org-set-key-theme)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
** =org-superstar=
#+begin_src emacs-lisp
(use-package org-superstar
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook #'org-superstar-mode))
#+end_src
** =org-appear=
#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :after org
  :custom
  (org-appear-autolinks t)
  (org-appear-delay 1)
  :config
  (add-hook 'org-mode-hook #'org-appear-mode))
#+end_src
** =gnuplot=
#+begin_src emacs-lisp
(use-package gnuplot
  :ensure t
  :after org)
#+end_src
** =org-fragtog=
#+begin_src emacs-lisp
(use-package org-fragtog
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook #'org-fragtog-mode))
#+end_src
* Other
** =recentf=
#+begin_src emacs-lisp
(use-package recentf
  :ensure nil
  :after no-littering
  :custom
  (recentf-max-saved-items 512)
  :init
  (recentf-mode 1)
  (load-file recentf-save-file)
  :config
  (add-hook 'kill-emacs-hook 'recentf-save-list))
#+end_src
** GC
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 96 1024 1024))
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src
** Elpaca process ques
#+begin_src emacs-lisp
(elpaca-process-queues)
#+end_src
